@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap');

.header {  /* header flex container has the header logo and links */
    display: flex;
    justify-content: space-around;
    align-items: center;
    font-family: Roboto, sans-serif;
    background-color: #1F2937;
    font-size: 24px;
    color: #F9FAF8;    
}

.header p {
    margin-left: -45px;
    padding: 0px;
}

ul {  /*unordered list becomes its own container so the links will be shown as a row */
    display: flex;  
    list-style-type: none;
    gap: 18px;
    margin-right: -45px;
}

li {
    font-size: 18px;
}

a {
    text-decoration: none;
    color: #E5E7EB;
}

.container {  /* this contains all the sections below the header */
    display: flex;
    flex-direction: column; /* each section will be stacked on top of each. each section will then be styled as a row 
    or as a column as needed */
    flex: 1 1 auto; /* this will make each section grow/shrink equally to fill up the 
    available space downward since the direction is column. and this will make the footer get pushed to the bottom */
    font-family: Roboto, sans-serif;
}

.website-awesome { /* this flex container has left and right sides that will show in a row */
    display: flex;
    justify-content: space-around;
    align-items: flex-end;
    background-color: #1F2937;
    column-gap: 30px;
    padding: 0px 70px 100px 70px; /* before this was 70 all around. the current measurement is closer to the sample */
}

.left-side {   /* instead of having the items as a column as i initially tried, i limited the width and used flex wrap
    so each item will wrap to the next row when there isn't enough space */
    display: flex;
    flex-wrap: wrap;
    width: 350px;
}

/* .left-side {  this shows the same result as above. i thought maybe doing it this way, the bolded p and subtext p 
    would be closer together. 
    display: flex;
    flex-direction: column;
    row-gap: 15px; this doesn't reduce the space between the bolded p and the smaller p
    width: 350px;
    flex: none;  this doesn't do anything about the space between bolded p and smaller p
} */


.left-side .main {
    font-size: 48px;
    color: #F9FAF8;
    font-weight: 800;
    margin-bottom: -10px; /*this makes the bold p and subtext p closer together */
}

.left-side .secondary {
    font-size: 18px;
    color: #E5E7EB; 
    justify-content: flex-start; /* since the left side is wrap, the subtext p is like a new row. this will push it 
    to the edge */
}

button {
    background-color: #3882F6;
    color: #F9FAF8;
    width: 100px;
    height: 40px;
    border-radius: 10px;
    border: none;
}

.random-info {  /* this flex container will have a title part and some images with text */
    display: flex;
    flex-direction: column; /* the title and the row of images/text will be the column parts */
    /* then the row of images/text will be a row */ 
}

.random-info .title {
    align-items: center;
    justify-content: center;
    margin-top: 70px;
    font-size: 36px;
    font-weight: 800;
    color: #1F2937;
}

.random-info p { 
    text-align: center;
}

.random-info-interior { /* the images with text will need to show in a row */
    display: flex;
    gap: 35px;
    justify-content: space-around;
    align-items: center;
    padding: 40px 160px 100px 160px;
}

.card {  /* each image with text is in a card format where the img can grow and push the text to the bottom */
    display: flex;
    flex-direction: column;
}

.card img {
    flex: 1 1 auto;  /* this will make each section grow/shrink equally to fill up the 
    available space downward since the above .card is using direction column. by using flex: 1 1 auto, it will 
    make the cards/text uniform where if the image grows, the text is always at the bottom of the card. this was a tip
    from the typical use cases from mdn flexbox */
    border-radius: 14px;
    border: 4px solid #3882F6;
}

.quote {
    display: flex; /* this makes it flex in a row across the page. then i added a width to constrain the block of text,
    but it stopped going across the page and only went up to the width. justify-content: center doesn't center it across the 
    page; only inside the width. */
    flex-wrap: wrap;
    /*width: 600px; don't use this b/c it creates a box around the quote and the color only is inside the box. need the 
    color to go across the whole div */
    padding: 80px 350px 100px 350px; /* use this instead to shrink the content b/c the padding will push the text into 
    the center more */
    justify-content: flex-end;
    margin: auto; /* this centers the text*/
    background-color: #E5E7EB;
    font-size: 36px; 
    font-style: italic;
    color: #1F2937;

}

.quote-second {
    margin-top: -10px;
    font-size: 20px;
    font-style: normal;
}

.call-action {  /* the container section below the header has each section stacked as a column. then inside each 
    section, it is using either row or continuing as a column. here it is row. */
    display: flex;
    align-items: center;
    justify-content: space-evenly;
    width: 900px; /* to constrain the width so it isn't across the whole screen */
    background-color: #3882F6;
    margin: 80px auto; /* centers the box */
    color: #F9FAF8;
    border-radius: 10px;
    font-weight: bold;
    font-size: 24px;
}

.call-action-second {
    font-weight: normal;
    font-size: 18px;
}

.call-action button {
    border-radius: 10px;
    border: 2px solid;
}

.footer { /* the class container below the header section stacked each section on top of each other using column. 
    but this section is using neither row or column since it is a single p and only needs to be centered. other classes
    needed a row or column flex b/c there was more than one flex item. also with the container using column, it pushes 
    the footer all the way down to the bottom of the page b/c all the other sections are on top of this. */
    background-color: #1F2937;
    text-align: center;
    padding: 30px;
    color: #E5E7EB;
}